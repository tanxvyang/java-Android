


修改表
	添加列  : 
		later table 表名 add  列名 类型
	修改列类型:
		alter table 表名 modify 列名 类型
	修改列名和类型:
		alter table 表名 change column 旧列名 新列名 类型
	
	删除列:
		alter  table 表名 drop column 列名
	修改表名:
		rename table 旧表名 to 新表名



	DML
		增 insert
		 insert into t_test (id ,name)values(2,'aab');
		删 delete
		改 update
		查



-------------------------------------------------------

create table t_dept(
	id int primary key auto_increment,
	name varchar(10)
);

create table t_emp(
	id int primary key auto_increment,
	name varchar(10),
	salary double,
	dept_id int references t_dept(id),
	manager_id int references t_emp(id)
);






insert into t_dept values (1,'d1');
insert into t_dept values (2,'d2');
insert into t_dept values (3,'d3');


insert into t_emp values (2,'e2',4500,1,1);
insert into t_emp values (3,'e3',4500,2,1);
insert into t_emp values (4,'e4',4000,1,2);
insert into t_emp values (5,'e5',3900,1,2);
insert into t_emp values (6,'e6',3850,1,2);
insert into t_emp values (7,'e7',3800,2,2);
insert into t_emp values (8,'e8',3500,2,7);
insert into t_emp values (9,'e9',3500,2,7);


		select * from 表

查找员工姓名,部门名  老板

  select name,ifnull(dept_id,'BOSS')
  from t_emp;

 起别名

 select name,ifnull(dept_id,'BOSS') dept_id
  from t_emp;

  select name,ifnull(dept_id,'BOSS') "dept id"  //含有空格用双引号"  "
  from t_emp;

排重
  员工分布在哪些部门,部门id

  SELECT DISTINCT dept_id
  from t_emp;


  分页
 
 前3条数据
    select *
    from t_emp
    limit 3;

从下标为3 开始5条
    select *
    from t_emp 
    limit 3,5;

找员工表中第二 pageno页数据,一页最多显示5 maxsize条
 select *
 from t_emp
 limit (pageNo-1)*maxSize,maxSize ;

选择操作
    2号部门有哪些员工 ,name  ,id

    select name,dept_id 
    from t_emp
    where dept_id=2;
工资大于4000员工,姓名 年薪
  select name,salary*12
  from t_emp
   where salary>4000;

   找出工资在3000到3500之间员工 ,姓名
   
select name
     from t_emp
    where salary between 3000 and 3500;

    select name
     from t_emp
     where salary  >=3000 and salary <=3500;


     找最高领导,及年薪
      select name,salary
    -> from t_emp
    -> where manager_id is null;


    找出1,2部门员工,姓名

    select name
    -> from t_emp
    -> where dept_id=1 or dept_id=2;


     select name
    -> from t_emp
     where dept_id in (1,2);

    处了2,3号部门所有员工,所有信息
     select *
     from t_emp
    where dept_id not in(2,3)
    or dept_id is null;




    select *from t_emp
    -> where dept_id <>2
    -> and dept_id<>3
    -> or dept_id is null;



    找出以E开头的员工
    select *from t_emp
    where name like 'E%';

    找出以E_开头的员工
    select *from t_emp
    where name like 'E\_%';

找出2号部门年薪高于4200的员工,姓名,工资

select name,salary
from t_emp
where salary>4200/12;

排序
  所有员工按工资降序显示 
  select *from t_emp 
  order by salary desc;


  2号部门员工按工资降序显示 
  select *from t_emp 
  where dept_id=2
  order by salary desc
  ;


所有员工信息,部门升序,部门内按工资降序
 select *
 from t_emp
 order by dept_id,salary desc;

多表查询
  笛卡尔集
  select *
  from 表1 ,表2
找出最高领导之外的姓名和部门名


内连接
 select e.name,d.name
     from t_emp e
    inner join t_dept d
    on e.dept_id=d.id;

    外链接
         外连接=内连接+没有匹配的记录

找出所有员工姓名,部门

select e.name,d.name
    from t_emp e
    left outer join t_dept d
    on e.dept_id=d.id;

   select e.name,d.name
     from t_emp e
     left join t_dept d
     on e.dept_id=d.id;
哪些部门没有员工,部门名

   select d.name
         from t_emp e
     right join t_dept d
     on e.dept_id=d.id
     where e.id is null;


 自连接
     查询所有员工姓名和领导名,没有领导的显示boos


      select e.name,m.name
     from t_emp e
    left join t_emp m
    on e.manager_id=m.id;

select e.name,ifnull(m.name,'BOSS') manager_id
     from t_emp e
    left join t_emp m
    on e.manager_id=m.id;


哪些人是领导,姓名
select distinct m.name
from t_emp e
join t_emp m
   on e.manager_id =m.id;

那些人不是领导,姓名
select  m.name
from t_emp e
right join t_emp m
   on e.manager_id =m.id
   where e.id is null;

2号部门的平均工资,平均工资

select avg(salary)
from t_emp
where dept_id=2;

2号部门平均工资,部门号,工资

select max(dept_id),avg(salary)
from t_emp
where dept_id=2;

各个部门的平均工资,部门号,平均工资

select dept_id,avg(salary)
from t_emp
group by dept_id;

列出平均工资大于4000的部门,部门号和平均工资

 select dept_id,avg(salary)
    from t_emp
    group by dept_id
    having avg(salary)>4000;


子查询
   非关联子查询

	谁的工资最低,姓名,工资

	select name ,salary
	from t_emp
	where salary =(select min(salary)
				from  t_emp);


	谁和e4在同一个部门
	
	select name
	from t_emp
	where dept_id=(select dept_id
			from t_emp
			where name='e4')
		and name<>'e4';

谁是领导
select name
from t_emp
where dept_id=(select manager
		from t_emp);

谁不是领导
    关联子查询	









----------------------------------------------------------------------------------------------



JDBC
注册驱动
	方式一
		Driver driver=new 具体数据库的驱动类型();
		DriverManager.registerDriver(driver);

	方式二
		Class.forName("驱动类的名字");

	方式三
		java -Djdbc.drivers=驱动类名


API
	java.sql javax.sql

	DriverManager	类
	Driver		接口
	Connection	接口		获得操作对象
	Statement	接口以及子接口	操作对象
					发送sql语句


步骤
1.注册驱动
2.获得连接
3.获得操作对象
4.发送sql语句
5.处理结果集
6.关闭资源


DDL操作 execute
DML操作 exeucteUpdate



Statement 接口以及子接口
预编译的操作对象
	PreparedStatement

	jdbc首先回将sql语句交给数据库编译
	执行时只是传递参数

	作用
		提高效率
		防止sql注入


select *
from t_user
where username='sdfasdf'
and password='1' or '1'='1'







--------------------------------------------------------------------------------------

-----------------------------------JDBC处理-------creajava.jdbc.testJDBC_1109--------------------------------------------

1.批处理
	同一条SQL语句,需要执行多次
		
 public static void main(String[] args) {

 
        String driverClassName="com.mysql.jdbc.Driver";
        String url="jdbc:mysql://127.0.0.1:3306/jdbc";
        String username="root" ;
        String password="610322";

        Connection con=null;

        PreparedStatement ps=null;
        long start=System.currentTimeMillis();
        try {
            Class.forName(driverClassName);
            con=DriverManager.getConnection(url, username, password);
           con.setAutoCommit(false);

            String sql=new StringBuilder()
                    .append("insert into t_user ")
                    .append("    (name) ")
                    .append("values ")
                    .append("    (?)")
                    .toString();
            ps=con.prepareStatement(sql);
          for (int i=0;i<30001;i++){
              ps.setString(1,"n"+1);
              ps.executeUpdate();
              ps.addBatch();

              if (i%10000==0){
                  ps.executeBatch();
              }

          }
            ps.executeBatch();
          con.commit();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (ps!=null){
                try {
                    ps.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if(con!=null){
                try {
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        long end=System.currentTimeMillis();
        System.out.println(end-start);


    }




2.保存返回主键

prepareStatement(String sql, int autoGeneratedKeys) 
          创建一个默认 PreparedStatement 对象，该对象能获取自动生成的键。

	prepareStatement(String sql, int[] columnIndexes) 
          创建一个能返回由给定数组指定的自动生成键的默认 PreparedStatement 对象。
	
	prepareStatement(String sql, String[] columnNames) 
          创建一个能返回由给定数组指定的自动生成键的默认 PreparedStatement 对象。

订单			订单明细
	id			id
	no			product
	price			num
				price
				order_id

	

	12345678
	---------------------------------
	序号	商品	数量	价格
	1		aaa	    3        99.0
	2		bbb      2       40.0
	--------------------------------
							 139.0


create table t_order(
	id int primary key auto_increment,
	no varchar(20),
	price double
);

create table t_item(
	id int primary key auto_increment,
	product varchar(20),
	num int,
	price double,
	order_id int references t_order(id)
);













--------------------------------------------------------------------------------------





-


    系统架构
表示层	ui servlet controller action
	显示逻辑
	跟用户做数据交互
	并调用业务层完成核心业务逻辑


业务层	service
	处理核心的业务逻辑
	并调用持久层完成持久化操作
	处理交叉业务逻辑（事务，日志，安全，缓存等）

持久层	dao
	单一的持久化操作

域层	entity	vo
	数据的载体

	


class AccountVO{
	int fromAccountId
	int toAccountId
	double money
}


转账(AccountVO vo){
	//根据fromAccountId查询账户信息

	//判断账户是否存在

	//判断余额是否够

	//fromAccount.money-money//更新数据库
	update()

	//toAccount.money+money//更新数据库
	update()
}

select(){
}

update(){
	update t_account
	set money=?
	where id=?
}

立项
需求分析
概要设计
详细设计
开发
测试
部署
维护


Emp		Dept
  Dept d








-----------------------------------------------------
静态代理模式   Proxy	
		在不改变现有基础上,添加新的功能



















		.//业务接口/代理接口
		public interface LOL{
			public void play();
		
		}

		//目标类

		public class 拳头 implement LOL{
				public void play(){
					xxx
				
				}
		
		}
	//代理类

	public class 腾讯 implement LOL{
	private LOL lol;
	public 腾讯(){
		lol=new 拳头();
	}

public void login(string  QQ){

}

	public void play(){
			//收费
			lol.play();
	}

			public void play(){
			
			
			}
	}


	//调用者
	public class  palyer{
	
		main();
		LOL
	}




	---------------Blob ------1115----------

	Blob 类型的处理
		用于保存文件

		存储文件
				方式一
					数据库使用varchar类型

					保存文件在硬盘上的路径

					文件保存在硬盘上

					通过程序的IO操作存储文件
				方式二
					 直接将文件保存在数据库中
					 使用blob类型
					 程序通过jdbc操作文件
		

		create table t_test1(
		id int primary key auto_increment,
		)





