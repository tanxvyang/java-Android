API的使用
        API
            Application Programming Interface
            应用编程接口
         java.lang  中 Object 中11个方法,都需要背下来

         protected Object clone()

 protected  Object 	clone()
          创建并返回此对象的一个副本。

          clone 浅克隆对象
          重写clone方法,将权限扩大
          类实现cloneable方法

          克隆出来的对象和原对象的数据一致
          但是两个不同的个体,浅克隆



 boolean 	equals(Object obj)
          指示其他某个对象是否与此对象“相等”。

        Object 类的 equals 方法实现对象上差别可能性最大的相等关系；
        即，对于任何非空引用值 x 和 y，当且仅当 x 和 y 引用同一个对象时，此方法才返回 true（x == y 具有值 true）
    注意：当此方法被重写时，通常有必要重写 hashCode 方法，以维护 hashCode 方法的常规协定，该协定声明相等对象必须具有相等的哈希码。
        hashCode()
                  返回该对象的哈希码值。





protected  void 	finalize()   在垃圾回收以前执行此方法   //一般不重写
          当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。

        gc 垃圾回收器
            堆空间中的对象.如果没有任何引用指向他,就是垃圾
            gc会在空闲时,自动的做垃圾回收,释放内存空间
            程序员不需要控制内存
            程序员无法控制垃圾回收
                不能控制但可以建议
                System.gc();
                Runtime.getRuntime().gc


 Class<?> 	getClass()
          返回此 Object 的运行时类。
 int 	hashCode()
          返回该对象的哈希码值。
 void 	notify()
          唤醒在此对象监视器上等待的单个线程。
 void 	notifyAll()
          唤醒在此对象监视器上等待的所有线程。



 String 	toString()
          返回该对象的字符串表示。






 void 	wait()
          在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。
 void 	wait(long timeout)
          在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量前，导致当前线程等待。
 void 	wait(long timeout, int nanos)
          在其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量前，导致当前线程等待。
-------------------------------------------
String: 依旧是需要背的

        String类代表字符串。 Java程序中的所有字符串文字（例如"abc" ）都被实现为此类的实例。
        字符串不变; 它们的值在创建后不能被更改。 字符串缓冲区支持可变字符串。 因为String对象是不可变的，它们可以被共享。


toUpperCase
public String toUpperCase(Locale locale)将所有在此字符String使用给定的规则，大写Locale 。 案例映射基于Character类指定的Unicode标准版本。 由于案例映射并不总是1：1的字符映射，所以String可能与原始的String 。
区域设置敏感和1：M情况映射的示例如下表所示。

Language Code of Locale Lower Case Upper Case Description tr (Turkish) \u0069 \u0130 small letter i -> capital letter I with dot above tr (Turkish) \u0131 \u0049 small letter dotless i -> capital letter I (all) \u00df \u0053 \u0053 small letter sharp s -> two letters: SS (all) Fahrvergnügen FAHRVERGNÜGEN
参数
locale - 使用此区域设置的案例转换规则
结果
String ，转换成大写。

        String s1=new String("abc");    //2   一个参数对象,一个new出来的对象
               --             ---
        String s2="abc";                //0     所有常量都会放入池,凡是在池中的字符串,直接拿出不需要创建,目的是提高效率

        String s3="ab"+"c";             //0     常量,ab+c=abc,在javac编译期间就已经变成了 String s3="abc",目的是提高效率

        String s4="ab";                 //1
        String s5 = "c";                //1
        String s6 = s4+s5;              //1    是abc,但是是变量,在运行期间才有了值
                               //带缓冲区的
            执行的是    String s6 = new StringBuilder().append(s4).append(s5)
                        .toString


        String s7= s1.toUpperCase();    //1

        共创见了几个对象
        Person p = new person ("abc")
               1person         1string




        String s1 = "abc";          //1

        s1 = "aaaa";                //1
        String s2 = new String("abc");  //1
        String s3 = s1+s2;           //1
        String s4 = "aaaaabc";      //1
        String s5 = s1+s2;            //1
        //string 使用的不变模式

        string和byte[]之间的转换
            byte[] ->string
                    String(byte[] bytes)
                    通过使用平台的默认字符集解码指定的byte 数组,构成string
                    中文是GBK编码

            string ->byte[]
                    bytr[]

                String(byte[] bytes)
                通过使用平台的默认字符集解码指定的字节数组来构造新的 String 。
                String(byte[] bytes, Charset charset)
                构造一个新的String由指定用指定的字节的数组解码charset 。



        编码:
                计算机只认识二进制
                字模库
                ASCII码
                    128个字符        七位编码

                gb2312            16位编码  2byte 2字节
                    6000个文字  (常见)
                GBK   2万个文字, 和gb2312 兼容

                国际化组织       Unicode
                utf-8
                  1-3个字节        可变长的
                  中文占3个字节
                  英文占1个字节

                 utf-16
                        16位定长方案  2个字节
                    中文占4个字节
                    英文占2个字节

                  utf-16be
                    Java 内部处理文字的编码
==========找
     int        length()

 char       charAt(int index)
            返回 char指定索引处的值。

  String    substring(int beginIndex)      //截取字符串
            返回一个字符串，该字符串是此字符串的子字符串。


   int           indexOf(String str)
         返回指定子字符串第一次出现的字符串内的索引。
         lastIndexOf(int ch, int fromIndex)
        返回指定字符的最后一次出现的字符串中的索引，从指定的索引开始向后搜索。

========判断
    boolean          startsWith(String prefix)
                测试此字符串是否以指定的前缀开头。
    boolean            endsWith(String prefix)  //判断结尾

    boolean         equals(Object anObject)
                将此字符串与指定对象进行比较。  重写：
                             equals在 Object
                             参数
                             anObject - 对比这个 String的对象
                             结果
                             true如果给定的对象代表一个 String等效于这个字符串， false否则


                equalsIgnoreCase(String anotherString)
                将此 String与其他 String比较，忽略案例注意事项。

boolean         contains(CharSequence s)   //判断是否存在
            当且仅当此字符串包含指定的char值序列时才返回true。

        System.out.println(s2.indexOf("e"));  //不在则返回-1

========修改
    其实是创建新对象

            toLowerCase()
            将所有在此字符 String使用默认语言环境的规则，以小写。

            toUpperCase(Locale locale)
            将所有在此字符 String使用给定的规则，大写 Locale 。

       String   trim()
          返回一个字符串，其值为此字符串，并删除任何前导和尾随空格。



 String    replace(char oldChar, char newChar)
        返回从替换所有出现的导致一个字符串 oldChar在此字符串 newChar 。

String    replace(CharSequence target, CharSequence replacement)
            将与字面目标序列匹配的字符串的每个子字符串替换为指定的字面替换序列。




String         replaceAll(String regex, String replacement)
            用给定的替换替换与给定的 regular expression匹配的此字符串的每个子字符串。
            根据指定的正则表达式替换

        *正则表达式
                关心的是字符串的格式
                不关心字符串的值

 boolean        matches(String regex)
   告诉这个字符串是否匹配给定的 regular expression 。

   =========分割
  String[]      split(String regex)
        将此字符串分割为给定的 regular expression的匹配。



 String[]      split(String regex, int limit)
             将这个字符串拆分为给定的 regular expression的匹配。


==============字符串->char数组


char[]       toCharArray()
            将此字符串转换为新的字符数组。